name: build

on:
  push:
  pull_request:

jobs:
  validate:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run pre-commit hooks
        run: poetry run pre-commit run --all-files

  build-publish:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v3
      - name: Check if version already exists on PyPI
        id: check_version
        run: |
          PACKAGE_NAME=$(awk -F' = ' '/^name/ { gsub(/[ \"]/, "", $2); print $2 }' pyproject.toml)
          PACKAGE_VERSION=$(awk -F' = ' '/^version/ { gsub(/[ \"]/, "", $2); print $2 }' pyproject.toml)

          echo "Checking version $PACKAGE_VERSION of package $PACKAGE_NAME on PyPI..."

          pip install ${PACKAGE_NAME}==${PACKAGE_VERSION} &> /dev/null

          if [ $? -eq 0 ]; then
            echo "Version $PACKAGE_VERSION of package $PACKAGE_NAME already exists on PyPI!"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version $PACKAGE_VERSION of package $PACKAGE_NAME does not exist on PyPI."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and publish to pypi
        if: steps.check_version.outputs.exists == 'false'
        uses: JRubics/poetry-publish@v1.17
        with:
          pypi_token: ${{ secrets.PYPI_TOKEN }}

